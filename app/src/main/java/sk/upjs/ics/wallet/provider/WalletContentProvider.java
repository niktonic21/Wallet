package sk.upjs.ics.wallet.provider;

import android.content.ContentProvider;
import android.content.ContentResolver;
import android.content.ContentUris;
import android.content.ContentValues;
import android.content.UriMatcher;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.net.Uri;
import android.util.Log;

import java.util.Calendar;

import sk.upjs.ics.wallet.util.Defaults;

import static android.content.ContentResolver.SCHEME_CONTENT;
import static sk.upjs.ics.wallet.util.Defaults.ALL_COLUMNS;
import static sk.upjs.ics.wallet.util.Defaults.AUTOGENERATED_ID;
import static sk.upjs.ics.wallet.util.Defaults.NO_CONTENT_OBSERVER;
import static sk.upjs.ics.wallet.util.Defaults.NO_GROUP_BY;
import static sk.upjs.ics.wallet.util.Defaults.NO_HAVING;
import static sk.upjs.ics.wallet.util.Defaults.NO_NULL_COLUMN_HACK;
import static sk.upjs.ics.wallet.util.Defaults.NO_SELECTION;
import static sk.upjs.ics.wallet.util.Defaults.NO_SELECTION_ARGS;
import static sk.upjs.ics.wallet.util.Defaults.NO_SORT_ORDER;
import static sk.upjs.ics.wallet.util.Defaults.NO_TYPE;


public class WalletContentProvider extends ContentProvider {
    public static final String AUTHORITY = "sk.upjs.ics.wallet.provider.WalletContentProvider";
    public static final String ALL_ROWS = null;
    public static final Uri CONTENT_URI = new Uri.Builder()
            .scheme(SCHEME_CONTENT)
            .authority(AUTHORITY)
            .appendPath(Provider.Uzivatel.TABLE_NAME)
            .build();
    public static final Uri CONTENT_URI2 = new Uri.Builder()
            .scheme(SCHEME_CONTENT)
            .authority(AUTHORITY)
            .appendPath(Provider.Bankomat.TABLE_NAME)
            .build();
    public static final Uri CONTENT_URI3 = new Uri.Builder()
            .scheme(SCHEME_CONTENT)
            .authority(AUTHORITY)
            .appendPath(Provider.Transakcia.TABLE_NAME)
            .build();
    public static final Uri PHOTO_URI_CONTENT_URI = new Uri.Builder()
            .scheme(ContentResolver.SCHEME_CONTENT)
            .authority(AUTHORITY)
            .appendPath(Provider.PhotoUri.TABLE_NAME)
            .build();

    private static final int URI_MATCH_UZIVATELIA = 0;
    private static final int URI_MATCH_UZIVATEL_BY_ID = 1;
    private static final int URI_MATCH_UZIVATEL_BY_MENO = 2;
    private static final int URI_MATCH_UZIVATEL_BY_PRIHLASENIE = 3;
    private static final int URI_MATCH_BANKOMATY = 4;
    private static final int URI_MATCH_BANKOMAT_BY_ID = 5;
    private static final int URI_MATCH_TRANSAKCIE = 6;
    private static final int URI_MATCH_TRANSAKCIA_INSERT = 7;
    private static final int URI_MATCH_TRANSAKCIA_BY_ID = 8;
    public static final int URI_MATCH_PHOTO = 9;
    public static final int URI_MATCH_PHOTO_BY_ID = 10;
    public static final int URI_MATCH_TRANSAKCIA_BY_GRAF = 11;
    private static final int URI_MATCH_TRANSAKCIA_BY_STATS = 12;

    private static final String MIME_TYPE_UZIVATELIA = ContentResolver.CURSOR_DIR_BASE_TYPE + "/vnd." + AUTHORITY + "."+Provider.Uzivatel.TABLE_NAME ;
    private static final String MIME_TYPE_SINGLE_UZIVATEL = ContentResolver.CURSOR_ITEM_BASE_TYPE + "/vnd." + AUTHORITY + "." + Provider.Uzivatel.TABLE_NAME;
    private static final String MIME_TYPE_BANKOMATY = ContentResolver.CURSOR_DIR_BASE_TYPE + "/vnd." + AUTHORITY + "."+Provider.Bankomat.TABLE_NAME ;
    private static final String MIME_TYPE_SINGLE_BANKOMAT = ContentResolver.CURSOR_ITEM_BASE_TYPE + "/vnd." + AUTHORITY + "." + Provider.Bankomat.TABLE_NAME;
    private static final String MIME_TYPE_TRANSAKCIE = ContentResolver.CURSOR_DIR_BASE_TYPE + "/vnd." + AUTHORITY + "."+Provider.Transakcia.TABLE_NAME ;
    private static final String MIME_TYPE_SINGLE_TRANSAKCIA = ContentResolver.CURSOR_ITEM_BASE_TYPE + "/vnd." + AUTHORITY + "." + Provider.Transakcia.TABLE_NAME;
    private static final String MIME_TYPE_PHOTO_URI = ContentResolver.CURSOR_ITEM_BASE_TYPE + "/vnd." + AUTHORITY + "." + Provider.PhotoUri.TABLE_NAME;


    public WalletContentProvider() {
    }

    private UriMatcher uriMatcher = new UriMatcher(UriMatcher.NO_MATCH);

    private DatabaseOpenHelper databaseHelper;

    @Override
    public boolean onCreate() {
        uriMatcher.addURI(AUTHORITY,Provider.Uzivatel.TABLE_NAME, URI_MATCH_UZIVATELIA);
        uriMatcher.addURI(AUTHORITY, Provider.Uzivatel.TABLE_NAME + "/#", URI_MATCH_UZIVATEL_BY_ID);
        uriMatcher.addURI(AUTHORITY, Provider.Uzivatel.TABLE_NAME + "/mena", URI_MATCH_UZIVATEL_BY_MENO);
        uriMatcher.addURI(AUTHORITY, Provider.Uzivatel.TABLE_NAME + "/prihlasenie", URI_MATCH_UZIVATEL_BY_PRIHLASENIE);
        uriMatcher.addURI(AUTHORITY,Provider.Bankomat.TABLE_NAME, URI_MATCH_BANKOMATY);
        uriMatcher.addURI(AUTHORITY, Provider.Bankomat.TABLE_NAME + "/#", URI_MATCH_BANKOMAT_BY_ID);
        uriMatcher.addURI(AUTHORITY,Provider.Transakcia.TABLE_NAME +"/list/#", URI_MATCH_TRANSAKCIE);
        uriMatcher.addURI(AUTHORITY,Provider.Transakcia.TABLE_NAME , URI_MATCH_TRANSAKCIA_INSERT);
        uriMatcher.addURI(AUTHORITY,Provider.Transakcia.TABLE_NAME+ "/#", URI_MATCH_TRANSAKCIA_BY_ID);
        uriMatcher.addURI(AUTHORITY, Provider.PhotoUri.TABLE_NAME, URI_MATCH_PHOTO);
        uriMatcher.addURI(AUTHORITY, Provider.PhotoUri.TABLE_NAME + "/#", URI_MATCH_PHOTO_BY_ID);
        uriMatcher.addURI(AUTHORITY, Provider.Transakcia.TABLE_NAME +"/stats", URI_MATCH_TRANSAKCIA_BY_STATS);
        uriMatcher.addURI(AUTHORITY, Provider.Transakcia.TABLE_NAME +"/graf", URI_MATCH_TRANSAKCIA_BY_GRAF);

        this.databaseHelper = new DatabaseOpenHelper(getContext());
        return true;
    }

    @Override
    public Cursor query(Uri uri, String[] projection, String selection,
                        String[] selectionArgs, String sortOrder) {
        Cursor cursor = null;
        System.out.println("Uri v contentProvider v queri " + uri.toString());
        switch(uriMatcher.match(uri)) {
            case URI_MATCH_UZIVATELIA:
                cursor = listNotes();
                cursor.setNotificationUri(getContext().getContentResolver(), uri);
                return cursor;
            case URI_MATCH_UZIVATEL_BY_ID:
                long id = ContentUris.parseId(uri);
                cursor = findById(id);
                cursor.setNotificationUri(getContext().getContentResolver(), uri);
                return cursor;
            case URI_MATCH_UZIVATEL_BY_MENO:
                cursor = listMien();
                cursor.setNotificationUri(getContext().getContentResolver(), uri);
                return cursor;
            case URI_MATCH_UZIVATEL_BY_PRIHLASENIE:
                cursor = prihlasenie();
                cursor.setNotificationUri(getContext().getContentResolver(), uri);
                return cursor;
            case URI_MATCH_BANKOMATY:
                cursor = listBankomat();
                cursor.setNotificationUri(getContext().getContentResolver(), uri);
                return cursor;
            case URI_MATCH_BANKOMAT_BY_ID:
                long ide = ContentUris.parseId(uri);
                cursor = findByIde(ide);
                cursor.setNotificationUri(getContext().getContentResolver(), uri);
                return cursor;
            case URI_MATCH_TRANSAKCIE:
                System.out.println("Uri v contentProvider v queri transakcie "+uri.toString());
                long idecko = ContentUris.parseId(uri);
                cursor = listTransakce(idecko);
                cursor.setNotificationUri(getContext().getContentResolver(), uri);
                return cursor;
            case URI_MATCH_TRANSAKCIA_BY_ID:
                long idecko2 = ContentUris.parseId(uri);
                cursor = listTransakce2(idecko2);
                cursor.setNotificationUri(getContext().getContentResolver(), uri);
                return cursor;
            case URI_MATCH_TRANSAKCIA_INSERT:
                System.out.println("Uri v contentProvider v queri transakcie insert "+uri.toString());
                cursor = listTransakcie3();
                cursor.setNotificationUri(getContext().getContentResolver(), uri);
                return cursor;
            case URI_MATCH_PHOTO:
                cursor = getPhotoCursor();
                cursor.setNotificationUri(getContext().getContentResolver(), uri);
                return cursor;
            case URI_MATCH_TRANSAKCIA_BY_STATS:
                Log.w("Uri2",uri.toString());
                cursor = statistic();
                cursor.setNotificationUri(getContext().getContentResolver(), uri);
                return cursor;
            case URI_MATCH_TRANSAKCIA_BY_GRAF:
                Log.w("Uri2",uri.toString());
                cursor = graf();
                cursor.setNotificationUri(getContext().getContentResolver(), uri);
                return cursor;
            default:
                return Defaults.NO_CURSOR;
        }
    }
    private Cursor graf() {
        SQLiteDatabase db = databaseHelper.getReadableDatabase();
        return db.query(Provider.Transakcia.TABLE_NAME,
                new String[]{"(iduziv),(typ),(month)","(suma)"},
                NO_SELECTION, NO_SELECTION_ARGS, NO_GROUP_BY, NO_HAVING, NO_SORT_ORDER);
    }

    private Cursor statistic() {
        SQLiteDatabase db = databaseHelper.getReadableDatabase();
        return db.query(Provider.Transakcia.TABLE_NAME,
                new String[]{"(iduziv)","(typ)","(suma)"},
                NO_SELECTION, NO_SELECTION_ARGS, NO_GROUP_BY, NO_HAVING, NO_SORT_ORDER);
    }

    private Cursor getPhotoCursor() {
        SQLiteDatabase db = databaseHelper.getReadableDatabase();
        return db.query(Provider.PhotoUri.TABLE_NAME,
                ALL_COLUMNS, NO_SELECTION, NO_SELECTION_ARGS, NO_GROUP_BY, NO_HAVING, NO_SORT_ORDER);
    }

    private Cursor listTransakce(Long ide) {
        SQLiteDatabase db = databaseHelper.getReadableDatabase();
        System.out.println("V list transakcie a ide uzivatela "+ide);
        System.out.println("V list id uzivatel "+Provider.Transakcia.ID_UZIVATEL);
        Long iduz=Long.parseLong(Provider.Transakcia.ID_UZIVATEL);
        String selection =iduz + "=" + ide;
        return db.query(Provider.Transakcia.TABLE_NAME,
                new String[]{"(month) as valMonth","SUM(suma) as valTotalMonth"},
                selection, NO_SELECTION_ARGS, "valMonth", NO_HAVING, NO_SORT_ORDER);
    }
    private Cursor listTransakce2(Long ide) {
        SQLiteDatabase db = databaseHelper.getReadableDatabase();
        String selection = Provider.Transakcia._ID + "=" + ide;
        return db.query(Provider.Transakcia.TABLE_NAME, ALL_COLUMNS, selection, NO_SELECTION_ARGS, NO_GROUP_BY, NO_HAVING, NO_SORT_ORDER);
    }
    private Cursor listTransakcie3() {
        System.out.println("list transakcie insert table name "+ Provider.Transakcia.TABLE_NAME);
        SQLiteDatabase db = databaseHelper.getReadableDatabase();
        return db.query(Provider.Transakcia.TABLE_NAME, new String[]{"iduziv","typ","suma","polozka","day","month","year"}, NO_SELECTION, NO_SELECTION_ARGS, NO_GROUP_BY, NO_HAVING, NO_SORT_ORDER);
    }

    private Cursor prihlasenie() {
        SQLiteDatabase db = databaseHelper.getReadableDatabase();
        return db.query(Provider.Uzivatel.TABLE_NAME, new String[]{"meno","heslo",Provider.Uzivatel._ID}, NO_SELECTION, NO_SELECTION_ARGS, NO_GROUP_BY, NO_HAVING, NO_SORT_ORDER);
    }

    private Cursor listMien() {
        SQLiteDatabase db = databaseHelper.getReadableDatabase();
        return db.query(Provider.Uzivatel.TABLE_NAME, new String[]{"meno"}, NO_SELECTION, NO_SELECTION_ARGS, NO_GROUP_BY, NO_HAVING, NO_SORT_ORDER);
    }
    /*SELECT strftime('%m', trxDateTime) as valMonth,
    SUM(trxAmount) as valTotalMonth
    FROM trx_log  GROUP BY valMonth*/
  /*  private Cursor graf() {
        SQLiteDatabase db = databaseHelper.getReadableDatabase();
        return db.query(Provider.Zapas.TABLE_NAME,
                new String[]{"strftime('%m',timestamp) as valMonth","SUM(spolu) as valTotalMonth"},
                NO_SELECTION, NO_SELECTION_ARGS, "valMonth", NO_HAVING, NO_SORT_ORDER);
    }*/

    private Cursor findById(long id) {
        SQLiteDatabase db = databaseHelper.getReadableDatabase();
        String selection = Provider.Uzivatel._ID + "=" + id;
        return db.query(Provider.Uzivatel.TABLE_NAME, ALL_COLUMNS, selection, NO_SELECTION_ARGS, NO_GROUP_BY, NO_HAVING, NO_SORT_ORDER);
    }

    private Cursor listNotes() {
        SQLiteDatabase db = databaseHelper.getReadableDatabase();
        return db.query(Provider.Uzivatel.TABLE_NAME, ALL_COLUMNS, NO_SELECTION, NO_SELECTION_ARGS, NO_GROUP_BY, NO_HAVING, NO_SORT_ORDER);
    }

    private Cursor findByIde(long ide) {
        SQLiteDatabase db = databaseHelper.getReadableDatabase();
        String selection = Provider.Bankomat._ID + "=" + ide;
        return db.query(Provider.Bankomat.TABLE_NAME, ALL_COLUMNS, selection, NO_SELECTION_ARGS, NO_GROUP_BY, NO_HAVING, NO_SORT_ORDER);
    }

    private Cursor listBankomat() {
        SQLiteDatabase db = databaseHelper.getReadableDatabase();
        return db.query(Provider.Bankomat.TABLE_NAME, ALL_COLUMNS, NO_SELECTION, NO_SELECTION_ARGS, NO_GROUP_BY, NO_HAVING, NO_SORT_ORDER);
    }

   /* private Cursor statistic() {
        SQLiteDatabase db = databaseHelper.getReadableDatabase();
        return db.query(Provider.Zapas.TABLE_NAME,
                new String[]{"SUM(pausal)","SUM(stravne)","SUM(cestovne)","SUM(spolu)","COUNT(cislozap)"},
                NO_SELECTION, NO_SELECTION_ARGS, NO_GROUP_BY, NO_HAVING, NO_SORT_ORDER);
    }

    private Cursor getPhotoCursor() {
        SQLiteDatabase db = databaseHelper.getReadableDatabase();
        return db.query(ProviderFoto.PhotoUri.TABLE_NAME,
                ALL_COLUMNS, NO_SELECTION, NO_SELECTION_ARGS, NO_GROUP_BY, NO_HAVING, NO_SORT_ORDER);
    }
    // AS stravne","SUM(cestovne) AS cestovne","SUM(pausal) AS Pausal","SUM(spolu) AS spolu"*/
    @Override
    public Uri insert(Uri uri, ContentValues values) {
        System.out.println("v insert uri 1"+ uri);
        switch(uriMatcher.match(uri)) {
            case URI_MATCH_UZIVATELIA:
                System.out.println("v insert uri 2");
                Uri newItemUri = saveUzivatel(values);
                getContext().getContentResolver().notifyChange(CONTENT_URI, NO_CONTENT_OBSERVER);
                return newItemUri;
            case URI_MATCH_BANKOMATY:
                System.out.println("v insert uri banokmat");
                Uri newBankomatUri = saveBankomat(values);
                getContext().getContentResolver().notifyChange(CONTENT_URI2, NO_CONTENT_OBSERVER);
                return newBankomatUri;
            case URI_MATCH_TRANSAKCIA_INSERT:
                System.out.println("v insert uri transakcia");
                Uri newTransakciaUri = saveTransakcia(values);
                getContext().getContentResolver().notifyChange(CONTENT_URI3, NO_CONTENT_OBSERVER);
                return newTransakciaUri;
            case URI_MATCH_PHOTO:
                Uri newItemUri2 = saveFoto(values);
                getContext().getContentResolver().notifyChange(PHOTO_URI_CONTENT_URI, NO_CONTENT_OBSERVER);
                return newItemUri2;
            default:
                return Defaults.NO_URI;
        }
    }
    private Uri saveFoto(ContentValues values){
        Calendar calendar = Calendar.getInstance();
        ContentValues contentValues1 = new ContentValues();
        contentValues1.put(Provider.PhotoUri._ID, Defaults.AUTOGENERATED_ID);
        contentValues1.put(Provider.PhotoUri.URI, values.getAsString(Provider.PhotoUri.URI));
        contentValues1.put(Provider.PhotoUri.YEAR, calendar.get(Calendar.YEAR));
        contentValues1.put(Provider.PhotoUri.MONTH, calendar.get(Calendar.MONTH)+1);
        contentValues1.put(Provider.PhotoUri.DAY, calendar.get(Calendar.DAY_OF_MONTH));
        contentValues1.put(Provider.PhotoUri.DESCRIPTION, values.getAsString(Provider.PhotoUri.DESCRIPTION));

        SQLiteDatabase db1 = databaseHelper.getWritableDatabase();
        long newId1 = db1.insert(Provider.PhotoUri.TABLE_NAME, NO_NULL_COLUMN_HACK, contentValues1);
        getContext().getContentResolver().notifyChange(PHOTO_URI_CONTENT_URI, NO_CONTENT_OBSERVER);
        return ContentUris.withAppendedId(PHOTO_URI_CONTENT_URI, newId1);
    }

    private Uri saveUzivatel(ContentValues values) {
        ContentValues uzivatel = new ContentValues();
        uzivatel.put(Provider.Uzivatel._ID, AUTOGENERATED_ID);
        uzivatel.put(Provider.Uzivatel.MENO, values.getAsString(Provider.Uzivatel.MENO));
        uzivatel.put(Provider.Uzivatel.HESLO, values.getAsString(Provider.Uzivatel.HESLO));
        uzivatel.put(Provider.Uzivatel.FINANCIE, values.getAsString(Provider.Uzivatel.FINANCIE));
        System.out.println("v saveUzivatel uri");
        SQLiteDatabase db = databaseHelper.getWritableDatabase();
        long newId = db.insert(Provider.Uzivatel.TABLE_NAME, NO_NULL_COLUMN_HACK, uzivatel);
        return ContentUris.withAppendedId(CONTENT_URI, newId);
    }
    private Uri saveBankomat(ContentValues values) {
        ContentValues bankomat = new ContentValues();
        bankomat.put(Provider.Bankomat._ID, AUTOGENERATED_ID);
        bankomat.put(Provider.Bankomat.LAT, values.getAsString(Provider.Bankomat.LAT));
        bankomat.put(Provider.Bankomat.LNG, values.getAsString(Provider.Bankomat.LNG));
        bankomat.put(Provider.Bankomat.TITLE, values.getAsString(Provider.Bankomat.TITLE));
        System.out.println("v saveBankomat uri");
        SQLiteDatabase db = databaseHelper.getWritableDatabase();
        long newIde = db.insert(Provider.Bankomat.TABLE_NAME, NO_NULL_COLUMN_HACK, bankomat);
        return ContentUris.withAppendedId(CONTENT_URI2, newIde);
    }
    private Uri saveTransakcia(ContentValues values) {
        ContentValues transakcia = new ContentValues();
        transakcia.put(Provider.Transakcia._ID, AUTOGENERATED_ID);
        transakcia.put(Provider.Transakcia.ID_UZIVATEL, values.getAsString(Provider.Transakcia.ID_UZIVATEL));
        transakcia.put(Provider.Transakcia.TYP, values.getAsString(Provider.Transakcia.TYP));
        transakcia.put(Provider.Transakcia.SUMA, values.getAsString(Provider.Transakcia.SUMA));
        transakcia.put(Provider.Transakcia.POLOZKA, values.getAsString(Provider.Transakcia.POLOZKA));
        transakcia.put(Provider.Transakcia.DAY, values.getAsString(Provider.Transakcia.DAY));
        transakcia.put(Provider.Transakcia.MONTH, values.getAsString(Provider.Transakcia.MONTH));
        transakcia.put(Provider.Transakcia.YEAR, values.getAsString(Provider.Transakcia.YEAR));
        System.out.println("v saveTransakcia uri");
        SQLiteDatabase db = databaseHelper.getWritableDatabase();
        long newIdes = db.insert(Provider.Transakcia.TABLE_NAME, NO_NULL_COLUMN_HACK, transakcia);
        return ContentUris.withAppendedId(CONTENT_URI3, newIdes);
    }


    @Override
    public int delete(Uri uri, String selection, String[] selectionArgs) {
        switch(uriMatcher.match(uri)) {
            case URI_MATCH_UZIVATEL_BY_ID:
                long id = ContentUris.parseId(uri);
                int affectedRows = databaseHelper.getWritableDatabase()
                        .delete(Provider.Uzivatel.TABLE_NAME, Provider.Uzivatel._ID + " = " + id, Defaults.NO_SELECTION_ARGS);
                getContext().getContentResolver().notifyChange(CONTENT_URI, NO_CONTENT_OBSERVER);
                return affectedRows;
            case URI_MATCH_TRANSAKCIA_BY_ID:
                long ide = ContentUris.parseId(uri);
                int affectedRows2 = databaseHelper.getWritableDatabase()
                        .delete(Provider.Transakcia.TABLE_NAME, Provider.Transakcia._ID + " = " + ide, Defaults.NO_SELECTION_ARGS);
                getContext().getContentResolver().notifyChange(CONTENT_URI3, NO_CONTENT_OBSERVER);
                return affectedRows2;
            case URI_MATCH_PHOTO_BY_ID:
                long id1 = ContentUris.parseId(uri);
                int affectedRows3 = databaseHelper.getWritableDatabase()
                        .delete(Provider.PhotoUri.TABLE_NAME, Provider.PhotoUri._ID + " = " + id1, Defaults.NO_SELECTION_ARGS);
                getContext().getContentResolver().notifyChange(PHOTO_URI_CONTENT_URI, NO_CONTENT_OBSERVER);
                return affectedRows3;

            case URI_MATCH_PHOTO:
                int affectedRows4 = databaseHelper.getWritableDatabase()
                        .delete(Provider.PhotoUri.TABLE_NAME, ALL_ROWS, Defaults.NO_SELECTION_ARGS);
                getContext().getContentResolver().notifyChange(PHOTO_URI_CONTENT_URI, NO_CONTENT_OBSERVER);
                return affectedRows4;
            default:
                return 0;
        }
    }

    @Override
    public String getType(Uri uri) {
        System.out.println("type"+uri);
        switch(uriMatcher.match(uri)) {
            case URI_MATCH_UZIVATEL_BY_ID:
                return MIME_TYPE_SINGLE_UZIVATEL;
            case URI_MATCH_UZIVATELIA:
                return MIME_TYPE_UZIVATELIA;
            case URI_MATCH_UZIVATEL_BY_MENO:
                return MIME_TYPE_UZIVATELIA;
            case URI_MATCH_UZIVATEL_BY_PRIHLASENIE:
                return MIME_TYPE_UZIVATELIA;
            case URI_MATCH_BANKOMAT_BY_ID:
                return MIME_TYPE_SINGLE_BANKOMAT;
            case URI_MATCH_BANKOMATY:
                return MIME_TYPE_BANKOMATY;
            case URI_MATCH_TRANSAKCIE:
                return MIME_TYPE_TRANSAKCIE;
            case URI_MATCH_TRANSAKCIA_BY_ID:
                return MIME_TYPE_SINGLE_TRANSAKCIA;
            case URI_MATCH_TRANSAKCIA_INSERT:
                return MIME_TYPE_TRANSAKCIE;
            case URI_MATCH_PHOTO:
                return MIME_TYPE_PHOTO_URI;
            case URI_MATCH_TRANSAKCIA_BY_STATS:
                return MIME_TYPE_TRANSAKCIE;
            case URI_MATCH_TRANSAKCIA_BY_GRAF:
                return MIME_TYPE_TRANSAKCIE;
        }
        return NO_TYPE;
    }


    @Override
    public int update(Uri uri, ContentValues values, String selection,
                      String[] selectionArgs) {
        throw new UnsupportedOperationException("Not yet implemented");
    }
}

